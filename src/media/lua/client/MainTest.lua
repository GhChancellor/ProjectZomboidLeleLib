---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by lele.
--- DateTime: 07/05/23 10:44
---

local dbgLeleLib = require("lib/DbgLeleLib")
local characterPz = require("lib/CharacterPZ")
local perkFactoryPZ = require("lib/PerkFactoryPZ")
local isoPlayerPZ = require("lib/IsoPlayerPZ")
local modDataX = require("lib/ModDataX")
local enumX = require("lib/EnumModData")
local characterLib = require("CharacterLib")

local test_ = "Test - "
local fail_ = " >>>>>>>>>>>>>> FAIL"
local ok_ = " >>>>>>>>>>>>>> Ok"

---@type IsoGameCharacter
local character = getPlayer()

local function charaterUpdate()
    character = characterLib.charaterUpdate()
end

local function fail(value)
    print(test_ .. value .. fail_)
end

local function ok(value)
    print(test_ .. value .. ok_)
end

local function checkTest(value1, value2, nameTest)
    if value1 == value2 then
        ok(nameTest)
    else
        fail(nameTest)
    end
end

local function baseProfession()
    charaterUpdate()
    characterPz.setProfession_PZ(character, dbgLeleLib.EnumProfession.BURGER_FLIPPER)
    local profession = characterPz.getProfession_PZ(character)

    checkTest(profession , dbgLeleLib.EnumProfession.BURGER_FLIPPER,
            "Profession" )

    characterPz.removeProfession(character)
end

local function baseKnownRecipes()
    local recipe = "Make Pizza"

    characterPz.addKnownRecipe(character, recipe)

    charaterUpdate()

    ------- -------------------------------------------------------------
    local knownRecipes = characterPz.getKnownRecipes_PZ(character)

    if knownRecipes then
        for i = 0, knownRecipes:size() - 1  do
            checkTest(knownRecipes:get(i), recipe, "KnownRecipes")
        end
    else
        checkTest("", "1", "knownRecipes:size()")
    end

    characterPz.removeKnowRecipe_PZ(character, recipe)

    --- -------------------------------------------------------------
    checkTest(character:getKnownRecipes():remove(recipe),
            false, "Remove KnowRecipe")

end

local function baseTrunkFloatTo2Decimal()
    local value = characterPz.trunkFloatTo2Decimal(1.151)

    checkTest(value, 1.15, "TrunkFloatTo2Decimal")
end

local function baseZombieKills()
    characterPz.setZombieKills_PZ(character, 15)

    checkTest(characterPz.getZombieKills_PZ(character), 15,
           "ZombieKills" )

    characterPz.setZombieKills_PZ(character, 0)
end

local function basePerkBoost()
    local boostLevel = 1

    characterPz.setPerkBoost_PZ(character, Perks.Cooking, boostLevel)

    checkTest(characterPz.getPerkBoost_PZ(character, Perks.Cooking),
            boostLevel, "PerkBoost")

    characterPz.removePerkBoost(character, Perks.Cooking)
end

-- todo non funziona correttamente, se preso singolarmente al il test viene fallito
local function baseMultiplier()
    local multiplier = 1.1
    characterPz.addXpMultiplier_PZ(character, Perks.Woodwork, multiplier,
            1, 1)

    charaterUpdate()

    local value = characterPz.getMultiplier_PZ(character, Perks.Woodwork)

    checkTest(characterPz.trunkFloatTo2Decimal(value),
            multiplier, "Multiplier" )

    characterPz.removeMultiplier(character, Perks.Woodwork)
end

local function baseEnumNumbers()
    checkTest(characterPz.EnumNumbers.EIGHT, 8, "EnumNumbers")
end

local function baseXp()
    characterPz.addXP_PZ(character, Perks.Cooking, 75)
    local xp_ = characterPz.getXp(character, Perks.Cooking)

    checkTest(xp_, 75, "Xp")

    --- -------------------------------------------------
    characterPz.removePerkLevel(character, Perks.Cooking)
end

local function basePerkLevel()
    characterPz.setPerkLevel(character, Perks.Cooking, 75)

    local level = characterPz.getPerkLevel_PZ(character, Perks.Cooking)

    checkTest(level, 1, "PerkLevel")
    --- -------------------------------------------------
    characterPz.removePerkLevel(character, Perks.Cooking)
end

local function baseTrait()
    local trait_ = "Handy"
    characterPz.setTraitsPerk_PZ(character, trait_)

    local traits_PZ = characterPz.getTraitsPerk_PZ(character)

    for i = 0, traits_PZ:size() - 1 do
        ---@type TraitFactory.Trait
        local trait = TraitFactory.getTrait(traits_PZ:get(i) ):getXPBoostMap()

        ---@type KahluaTable
        local traitKahluaTable = transformIntoKahluaTable(trait)
        for i2, _ in pairs(traitKahluaTable) do
            if tostring(i2) == "Woodwork" then
                checkTest(tostring(i2), "Woodwork", "Add Trait")
            end
        end
    end

    --- ------------------------------------------------
    characterPz.removeTrait_PZ(character, "Woodwork")

    local remove = character:getTraits():remove("Woodwork")
    checkTest(remove, false, "Remove trait")

    --- ------------------------------------------------

    characterPz.removeAllTraits_PZ(character)

    local flag = false
    for i = 0, traits_PZ:size() - 1 do
        ---@type TraitFactory.Trait
        local trait = TraitFactory.getTrait(traits_PZ:get(i) ):getXPBoostMap()

        ---@type KahluaTable
        local traitKahluaTable = transformIntoKahluaTable(trait)
        for _, _ in pairs(traitKahluaTable) do
            flag = true
        end
    end

    checkTest(flag, false, "Remove All Trait")
end

local function baseConvertLevelToXp()
    local xp = perkFactoryPZ.convertLevelToXp(Perks.Cooking, 1)

   checkTest(xp, 75, "ConvertLevelToXp")
end

local function basePerkName()
    local perk = perkFactoryPZ.getPerk_PZ(Perks.Cooking)
    checkTest(perk, perk, "Perk Name")
end

local function baseParent()
    local parent_ = "Combat"
    local parent = perkFactoryPZ.getParent_PZ(Perks.Maintenance)
    checkTest(parent_, parent, "Parent" )
end

local function baseHoursSurvived()
    local hoursSurvived = 1.0
    local hoursSurvived_
    isoPlayerPZ.setHoursSurvived_PZ(hoursSurvived)

    hoursSurvived_ = isoPlayerPZ.getHoursSurvived_PZ()
    checkTest(hoursSurvived_, hoursSurvived, "Hours Survived" )
end

local function baseCalories()
    local calories = 20.1
    local calories_
    local trunckedCalories
    isoPlayerPZ.setCalories_PZ(calories)

    calories_ = isoPlayerPZ.getCalories_PZ()

    trunckedCalories = characterPz.trunkFloatTo2Decimal(calories_)

    checkTest(trunckedCalories, calories, "Calories" )
end

local function baseWeight()
    local weight = 83
    local weight_
    isoPlayerPZ.setWeight_PZ(weight)

    weight_ = isoPlayerPZ.getWeight_PZ()
    checkTest(weight_, weight, "Weight" )
end

local function baseModData()
    local value = 10
    local values = {1 ,2 ,3 ,4 ,5}

    modDataX.saveModata(enumX.ModData.TEST_ENUM, value)

    local results = {}
    results = modDataX.readModata(enumX.ModData.TEST_ENUM)
    local result = results[1]

    checkTest(result, value, "ModData single value")

    if modDataX.isExists(enumX.ModData.TEST_ENUM) then
        checkTest(true, true, "ModData isExists")
    end

    if modDataX.remove(enumX.ModData.TEST_ENUM) ~= false then
        modDataX.remove(enumX.ModData.TEST_ENUM)
        checkTest(true, true, "ModData Remove")
    end

    modDataX.saveModata(enumX.ModData.TEST_ENUM, values)

    results = {}
    results = modDataX.readModata(enumX.ModData.TEST_ENUM)

    if type(results) == "table" then
        checkTest(true, true, "ModData multi value")
    end

    if modDataX.isExists(enumX.ModData.TEST_ENUM) then
        checkTest(true, true, "ModData isExists")
    end

    if modDataX.remove(enumX.ModData.TEST_ENUM) ~= false then
        modDataX.remove(enumX.ModData.TEST_ENUM)
        checkTest(true, true, "ModData Remove")
    end

    --[[
    local characterModData = "characterModData"

    modDataX.saveModata(characterModData, value)

    local results = {}
    results = modDataX.readModata(characterModData)
    local result = results[1]

    checkTest(result, value, "ModData single value")

    if modDataX.isExists(characterModData) then
        checkTest(true, true, "ModData isExists")
    end

    if modDataX.remove(characterModData) ~= false then
        modDataX.remove(characterModData)
        checkTest(true, true, "ModData Remove")
    end

    modDataX.saveModata(characterModData, values)

    results = {}
    results = modDataX.readModata(characterModData)

    if type(results) == "table" then
        checkTest(true, true, "ModData multi value")
    end

    if modDataX.isExists(characterModData) then
        checkTest(true, true, "ModData isExists")
    end

    if modDataX.remove(characterModData) ~= false then
        modDataX.remove(characterModData)
        checkTest(true, true, "ModData Remove")
    end
    ]]
end

--- ------------------------------------------------

local function traitsPerk()
    characterPz.setProfession_PZ(character, dbgLeleLib.EnumProfession.CHEF)

    local trait_ = "Feeble"
    characterPz.setTraitsPerk_PZ(character, trait_)

    charaterUpdate()

    local CharacterObj01 = CharacterObj:new()
    CharacterObj01 = characterLib.getTraitsPerk(character)

    local flag = false
    if CharacterObj01:getPerkDetails() then
        flag = true
    end

    checkTest(true,
            true, "Get PerkDetails")

    flag = false
    if CharacterObj01:getTraits() then
        flag = true
    end

    checkTest(true,
            true, "Get Traits")

    characterPz.removeProfession(character)
    characterPz.removeAllTraits_PZ(character)
end

local function perkProfession()
    characterPz.setProfession_PZ(character, dbgLeleLib.EnumProfession.CHEF)

    local CharacterObj01 = CharacterObj:new()

    charaterUpdate()

    CharacterObj01 = characterLib.getPerkProfession(character)

    local flag = false
    if CharacterObj01:getPerkDetails() then
        flag = true
    end

    checkTest(true,
            true, "Get perkProfession")

    characterPz.removeProfession(character)
    characterPz.removeAllTraits_PZ(character)
end

--- ------------------------------------------------------------

local function characterLibAllPerks()
    local CharacterObj01 = CharacterObj:new()
    charaterUpdate()
    CharacterObj01 = characterLib.getAllPerks(character)

    local flag = false
    if CharacterObj01:getPerkDetails() then
        flag = true
    end

    checkTest(true,
            true, "All Skills")

    local profession = CharacterObj01:getProfession()
    local profession_ = characterPz.getProfession_PZ(character)

    checkTest(profession,
            profession_, "All Skills - Profession")
end

local function characterLibPerksBoost()
    local boost = 1
    characterPz.setPerkBoost_PZ(Perks.Cooking, boost)

    charaterUpdate()

    local CharacterObj01 = CharacterObj:new()

    CharacterObj01 = characterLib.getPerksBoost(character)

    local flag = false

    for _, v in pairs(CharacterObj01:getPerkDetails()) do
        if v:getPerk() == Perks.Cooking then
            if v:getBoostLevel() == boost then
                flag = true
            end
        end
    end

    checkTest(true,
            true, "Perks Boost")

    characterPz.removePerkBoost(character, Perks.Cooking, boost)
end

local function characterLibKnownRecipes()
    local recipe = "Make Pizza"

    characterPz.addKnownRecipe(character, recipe)

    charaterUpdate()

    local CharacterObj01 = CharacterObj:new()
    CharacterObj01 = characterLib.getKnownRecipes(character)

    ---@type boolean
    local flag = false
    for _, v in pairs(CharacterObj01:getRecipes()) do
        if v == recipe then
            flag = true
        end
    end

    checkTest(flag,
            true, "KnownRecipes")

end

local function characterLibMultiplier()
    local multiplier = 1.0

    characterPz.addXpMultiplier_PZ(character, Perks.Cooking, multiplier,
            characterPz.EnumNumbers.ONE, characterPz.EnumNumbers.ONE)

    charaterUpdate()

    local CharacterObj01 = CharacterObj:new()
    CharacterObj01 = characterLib.getMultiplier(character)

    for _, v in pairs(CharacterObj01:getPerkDetails()) do
        if v:getPerk() == Perks.Cooking then
            checkTest(v:getMultiplier(),
                    multiplier, "Multiplier")
        end
    end

    characterPz.removeMultiplier(character, Perks.Cooking)
end

local function characterLibDe_EncodePerkDetails(character)
    characterPz.setProfession_PZ(character, dbgLeleLib.EnumProfession.CARPENTER)
    characterPz.setPerkLevel(character, dbgLeleLib.EnumPerk.Woodwork, 100.0)
    charaterUpdate()

    local CharacterObj01 = CharacterObj:new()
    local CharacterObj02 = CharacterObj:new()

    local perk = perkFactoryPZ.getPerk_PZ(dbgLeleLib.EnumPerk.Woodwork)
    local level = characterPz.getPerkLevel_PZ(character, perk)
    local xp = characterPz.getXp(character, perk)

    local perk2
    local level2
    local xp2

    CharacterObj01:addPerkDetails(perk, level, xp)

    local lines = {}

    for _, v in pairs(CharacterObj01:getPerkDetails()) do
        lines = characterLib.encodePerkDetails(CharacterObj01)
    end

    CharacterObj02 = characterLib.decodePerkDetails(lines)

    for _, v in pairs(CharacterObj01:getPerkDetails()) do
        perk = v:getPerk()
        level = v:getLevel()
        xp = v:getXp()
    end

    for _, v in pairs(CharacterObj02:getPerkDetails()) do
        perk2 = v:getPerk()
        level2 = v:getLevel()
        xp2 = v:getXp()
    end

    if perk == perk2 and level == level2 and xp == xp2 then
        checkTest(true, true, "De_EncodePerkDetails")
    else
        checkTest(false, true, "De_EncodePerkDetails")
    end

    lines = {}
end
--- ------------------------------------------------------------

--- ------------------------------------
local function key36(key)
    if key == 36 then
        print("Key = j > EncodePerkDetails \n")

    end
end

local function key37(key)
    if key == 37 then -- <<<< k
        print("Key = k > kill \n")
        character:die()
    end
end

local function baseTest()
    print("---------- Base ----------\n")
    baseProfession()
    baseKnownRecipes()
    baseTrunkFloatTo2Decimal()
    baseZombieKills()
    basePerkBoost()
    baseMultiplier()
    baseEnumNumbers()
    baseXp()
    basePerkLevel()
    baseTrait()
    baseConvertLevelToXp()
    basePerkName()
    baseParent()
    baseWeight()
    baseHoursSurvived()
    baseCalories()
    baseModData()
    print("---------- finish Base test ----------\n")
end

local function characterLibTest()
    print("---------- CharacterLib ----------\n")
    traitsPerk()
    perkProfession()
    ---- -- currentSkill()
    characterLibAllPerks()
    characterLibPerksBoost()
    characterLibKnownRecipes()
    characterLibMultiplier()
    characterLibDe_EncodePerkDetails(character)

    --- TODO controllare cooking e il multipier rimane sempre un -1

    -- uncompleted
    characterLib.resetCharacter(character)

    print("---------- finish CharacterLib test ----------\n")
end

local function onCustomUIKeyPressed(key)

    key36(key)
    key37(key)
    baseTest()
    characterLibTest()
end

Events.OnCustomUIKeyPressed.Add(onCustomUIKeyPressed)