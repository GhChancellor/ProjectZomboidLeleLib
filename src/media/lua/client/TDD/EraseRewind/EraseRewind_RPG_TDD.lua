---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by lele.
--- DateTime: 30/09/23 17:21
---

local characterKilledZombies = require("character/CharacterKilledZombies")
local characterLifeTime = require("character/CharacterLifeTime")
local characterBoost = require("character/CharacterBoost")
local characterMultiplier = require("character/CharacterMultiplier")
local characterNutrition = require("character/CharacterNutrition")
local characterPerkDetails = require("character/CharacterPerkDetails")
local characterTrait = require("character/CharacterTrait")
local characterRecipe = require("character/CharacterRecipe")
local debugDiagnostics = require("lib/DebugDiagnostics")
local dataValidator = require("lib/DataValidator")
local errHandler = require("lib/ErrHandler")
-- local modDataManager = require("lib/ModDataManager")
local characterPz = require("lib/CharacterPZ")
-- local perkFactoryPZ = require("lib/PerkFactoryPZ")
local isoPlayerPZ = require("lib/IsoPlayerPZ")
local characterLib = require("CharacterLib")
local characterManagement = require("character/CharacterManagement")
require("lib/CharacterBaseObj")

---@param character IsoGameCharacter
local function character_TDD(character)
    if not character then
        errHandler.errMsg("character_TDD(character)", errHandler.err.IS_NULL_CHARACTER)
        return nil
    end

    ------**Check trait**------
    characterTrait.writeBook(character)
    characterTrait.readBook(character)

    -- @type CharacterBaseObj
    local characterTraitObj = characterLib.getTraitsPerk(character)

    ---@type string
    local hardOfHearing = characterTraitObj:getTraits()[1]
    debugDiagnostics.checkTest(hardOfHearing,
            "HardOfHearing", "Trait hardOfHearing")

    ---@type string
    local slowReader = characterTraitObj:getTraits()[2]
    debugDiagnostics.checkTest(slowReader,
            "SlowReader", "Trait slowReader")

    ---@type string
    local handy = characterTraitObj:getTraits()[3]
    debugDiagnostics.checkTest(handy,
            "Handy", "Trait handy")


    --------**Check Recipe**-------
    characterRecipe.writeBook(character)
    characterRecipe.readBook(character)

    ---@type string
    local recipe = "Make Pizza"

    -- @type CharacterBaseObj
    local knownRecipesObj = characterLib.getKnownRecipes(character)

    if not knownRecipesObj:getRecipes()[1] then
        debugDiagnostics.checkTest(false, true, "List getKnownRecipes is empty")
    end

    for _, v in pairs(knownRecipesObj:getRecipes()) do
        debugDiagnostics.checkTest(v,
                recipe, "Recipe")
    end


    -----**Check Perk Details**----
    characterPerkDetails.writeBook(character)
    characterPerkDetails.readBook(character)

    -- Check Perk Details: check Profession
    debugDiagnostics.checkTest(characterPz.getProfession_PZ(character),
            debugDiagnostics.Profession.CARPENTER, "Profession" )

    -- Check Perk Details: Perk Level
    debugDiagnostics.checkTest( characterPz.getXp(character, Perks.Fitness),
            37500, "PerkLevel Fitness")
    debugDiagnostics.checkTest( characterPz.getXp(character, Perks.Strength),
            37500, "PerkLevel Strength")
    debugDiagnostics.checkTest( characterPz.getXp(character, Perks.Woodwork),
            1275, "PerkLevel Woodwork")
    debugDiagnostics.checkTest( characterPz.getXp(character, Perks.Maintenance),
            75, "PerkLevel Maintenance")
    debugDiagnostics.checkTest( characterPz.getXp(character, Perks.SmallBlunt),
            75, "PerkLevel SmallBlunt")


    -------**Check Nutrition**-------
    characterNutrition.writeBook(character)
    characterNutrition.readBook(character)

    debugDiagnostics.checkTest(isoPlayerPZ.getCalories_PZ(),
            1500, "Calories")

    -- check Weight
    debugDiagnostics.checkTest(isoPlayerPZ.getWeight_PZ(),
            92, "Weight")


    ------**Check multiplier**-----
    characterMultiplier.writeBook(character)
    characterMultiplier.readBook(character)

    local multiplier_PZ =
    characterPz.getMultiplier_PZ(character, Perks.Cooking)

    multiplier_PZ = dataValidator.trunkFloatTo2Decimal(multiplier_PZ)

    local multiplier = 1.0
    debugDiagnostics.checkTest(multiplier_PZ,
            multiplier, "Multiplier")


    ----**Check Life Time**----
    -- @param lifeTime double
    isoPlayerPZ.setHoursSurvived_PZ(1)

    characterLifeTime.writeBook(character)
    characterLifeTime.readBook(character)

    debugDiagnostics.checkTest( isoPlayerPZ.getHoursSurvived_PZ(),
            1, "Life Time")


    ---**Check Zombie Kills**---
    characterKilledZombies.writeBook(character)
    characterKilledZombies.readBook(character)

    debugDiagnostics.checkTest( characterPz.getZombieKills_PZ(character),
            15, "Killed Zombies")


    ----**Check Perk Boost**----
    characterBoost.writeBook(character)
    characterBoost.readBook(character)

    debugDiagnostics.checkTest( characterPz.getPerkBoost_PZ(character, Perks.Fitness),
            3, "PerkBoost Fitness")
    debugDiagnostics.checkTest( characterPz.getPerkBoost_PZ(character, Perks.Strength),
            3, "PerkBoost Strength")
    debugDiagnostics.checkTest( characterPz.getPerkBoost_PZ(character, Perks.Woodwork),
            3, "PerkBoost Woodwork")

    debugDiagnostics.displayTest()
    -- TODO - add more tests, manca il controllo del tempo. Non riesco a mandara avanti il tempo con le API
    print("Manca il controllo del tempo. Non riesco a mandara avanti il tempo con le API")
end

---@param character IsoGameCharacter
local function key34(character, key)
    if key == 34 then -- <<<< g
        print("Key = g > character_TDD \n")
        debugDiagnostics.setVerbose(false)
        debugDiagnostics.deleteCharacter()
        debugDiagnostics.createCharacter()

        character_TDD(character)

        debugDiagnostics.deleteCharacter()
        debugDiagnostics.createBasicCharacter()
    end
end

---@param character IsoGameCharacter
local function key35(character, key)
    if key == 35 then -- <<< h
        print("Key = h > createBasicCharacter  \n")
        debugDiagnostics.deleteCharacter()
        debugDiagnostics.createBasicCharacter()
    end
end

---@param character IsoGameCharacter
local function key36(character, key)
    if key == 36 then -- <<<< j
        print("Key = j > writeBook \n")
        characterManagement.writeBook(character)
    end
end

---@param character IsoGameCharacter
local function key37(character, key)
    if key == 37 then -- <<<< k
        print("Key = k > readBook \n")
        characterManagement.readBook(character)
    end
end

---@param character IsoGameCharacter
local function key17(character, key)
    if key == 17 then -- <<<< w
        print("Key = w >   \n")

    end
end

---@param character IsoGameCharacter
local function key18(character, key)
    if key == 18 then -- <<<< e
        print("Key = e >  \n")

    end
end

---@param character IsoGameCharacter
local function key16(character, key)
    if key == 16 then -- <<<< q
        print("Key = q > kill Character \n")
        character:die()
    end
end

local function onCustomUIKeyPressed(key)
    local character = getPlayer()

    key16(character, key) -- q kill character
    key17(character, key) -- w
    key18(character, key) -- e
    --key34(character, key) -- g
    key35(character, key) -- h
    key36(character, key) -- j
    key37(character, key) -- k
end

--Events.OnCustomUIKeyPressed.Add(onCustomUIKeyPressed)
